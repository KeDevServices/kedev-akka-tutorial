From d4d309ac9e01ce1b29b77f540286f97e16218008 Mon Sep 17 00:00:00 2001
From: Markus Strack <markus.strack@kedev.eu>
Date: Fri, 9 Oct 2015 16:41:33 +0200
Subject: [PATCH] Open Space - ActorSystem
To: jk@kedev.eu

---
 .../eu/kedev/training/akka/j3/ActorMessages.java   | 22 ++++++
 .../kedev/training/akka/j3/CountingSupervisor.java | 60 ++++++++++++++
 .../eu/kedev/training/akka/j3/CountingSystem.java  | 70 ++++++++++++++++
 .../eu/kedev/training/akka/j3/WordsCounter.java    | 92 ++++++++++++++++++++++
 .../kedev/training/akka/s1/WordsCounterSpec.scala  | 10 +--
 5 files changed, 246 insertions(+), 8 deletions(-)
 create mode 100644 src/main/java/eu/kedev/training/akka/j3/ActorMessages.java
 create mode 100644 src/main/java/eu/kedev/training/akka/j3/CountingSupervisor.java
 create mode 100644 src/main/java/eu/kedev/training/akka/j3/CountingSystem.java
 create mode 100644 src/main/java/eu/kedev/training/akka/j3/WordsCounter.java

diff --git a/src/main/java/eu/kedev/training/akka/j3/ActorMessages.java b/src/main/java/eu/kedev/training/akka/j3/ActorMessages.java
new file mode 100644
index 0000000..21c453b
--- /dev/null
+++ b/src/main/java/eu/kedev/training/akka/j3/ActorMessages.java
@@ -0,0 +1,22 @@
+package eu.kedev.training.akka.j3;
+
+import java.util.Date;
+
+public class ActorMessages {
+    public static class Start{}
+
+    public static class TimedStart {
+        private final Date date;
+
+        public TimedStart(Date date) {
+            this.date = date;
+        }
+
+        @Override
+        public String toString() {
+            return "TimedStart{" + "date=" + date + '}';
+        }
+    }
+
+    public static class Stop{}
+}
diff --git a/src/main/java/eu/kedev/training/akka/j3/CountingSupervisor.java b/src/main/java/eu/kedev/training/akka/j3/CountingSupervisor.java
new file mode 100644
index 0000000..80f7cb2
--- /dev/null
+++ b/src/main/java/eu/kedev/training/akka/j3/CountingSupervisor.java
@@ -0,0 +1,60 @@
+package eu.kedev.training.akka.j3;
+
+import akka.actor.ActorRef;
+import akka.actor.Props;
+import akka.actor.UntypedActor;
+import akka.event.Logging;
+import akka.event.LoggingAdapter;
+import akka.japi.Creator;
+
+public class CountingSupervisor extends UntypedActor {
+
+    LoggingAdapter log = Logging.getLogger(getContext().system(), this);
+
+    private final String directoryPath;
+    private boolean started = false;
+
+    public static Props props(final String directoryPath) {
+        return Props.create(new Creator<CountingSupervisor>() {
+            private static final long serialVersionUID = 1L;
+
+            @Override
+            public CountingSupervisor create() throws Exception {
+                return new CountingSupervisor(directoryPath);
+            }
+        });
+    }
+
+    public CountingSupervisor(String directoryPath) {
+        this.directoryPath = directoryPath;
+    }
+
+    @Override
+    public void onReceive(Object message) throws Exception {
+        if (message instanceof ActorMessages.Stop) {
+            log.info("I stop now.");
+            getContext().stop(self());
+        } else if (message instanceof ActorMessages.Start) {
+            if (isStarted()) {
+                log.error("I am already started.");
+            } else {
+                ActorRef counter = getContext().actorOf(WordsCounter.props(), "counter");
+                counter.tell(new WordsCounter.Count("Kenn ich net"), this.self());
+                setStarted(true);
+                log.info("I am starting now.");
+            }
+        } else if (message instanceof Long) {
+            log.info("Words: " + message);
+        } else {
+            log.warning("WHAT: " + message);
+        }
+    }
+
+    public boolean isStarted() {
+        return started;
+    }
+
+    public void setStarted(boolean started) {
+        this.started = started;
+    }
+}
diff --git a/src/main/java/eu/kedev/training/akka/j3/CountingSystem.java b/src/main/java/eu/kedev/training/akka/j3/CountingSystem.java
new file mode 100644
index 0000000..b90412a
--- /dev/null
+++ b/src/main/java/eu/kedev/training/akka/j3/CountingSystem.java
@@ -0,0 +1,70 @@
+package eu.kedev.training.akka.j3;
+
+import akka.actor.ActorRef;
+import akka.actor.ActorSystem;
+import akka.actor.Props;
+import akka.actor.Terminated;
+import akka.actor.UntypedActor;
+import akka.event.Logging;
+import akka.event.LoggingAdapter;
+import akka.japi.Creator;
+
+import java.util.Date;
+
+public class CountingSystem {
+
+    private ActorSystem system;
+
+    public static void main(String[] args) {
+        final CountingSystem countingSystem = new CountingSystem();
+        countingSystem.system = ActorSystem.create("countingSystem");
+        ActorRef supervisor = countingSystem.system.actorOf(CountingSupervisor.props("/tmp"), "supervisor");
+        ActorRef watcher = countingSystem.system.actorOf(countingSystem.props(supervisor, countingSystem), "watcher");
+        supervisor.tell(new ActorMessages.Start(), ActorRef.noSender());
+        supervisor.tell(new ActorMessages.Start(), ActorRef.noSender());
+        supervisor.tell(new ActorMessages.TimedStart(new Date()), ActorRef.noSender());
+        supervisor.tell(new ActorMessages.Stop(), ActorRef.noSender());
+    }
+
+    public static Props props(final ActorRef child, final CountingSystem countingSystem) {
+        return Props.create(new Creator<WatchActor>() {
+            private static final long serialVersionUID = 1L;
+
+            @Override
+            public WatchActor create() throws Exception {
+                return countingSystem.new WatchActor(child);
+            }
+        });
+    }
+
+    private class WatchActor extends UntypedActor {
+        LoggingAdapter log = Logging.getLogger(getContext().system(), this);
+
+        private ActorRef child;
+
+        public WatchActor(ActorRef child) {
+            this.child = child;
+            this.getContext().watch(child); // <-- the only call needed for registration
+        }
+
+        ActorRef lastSender = getContext().system().deadLetters();
+
+        @Override
+        public void onReceive(Object message) {
+            if (message instanceof Terminated) {
+                final Terminated t = (Terminated) message;
+                if (t.getActor() == child) {
+                    lastSender.tell("finished", getSelf());
+                    log.info("Child stopped.");
+                    CountingSystem.this.shutdown();
+                }
+            } else {
+                unhandled(message);
+            }
+        }
+    }
+
+    public void shutdown() {
+        system.shutdown();
+    }
+}
diff --git a/src/main/java/eu/kedev/training/akka/j3/WordsCounter.java b/src/main/java/eu/kedev/training/akka/j3/WordsCounter.java
new file mode 100644
index 0000000..5920745
--- /dev/null
+++ b/src/main/java/eu/kedev/training/akka/j3/WordsCounter.java
@@ -0,0 +1,92 @@
+package eu.kedev.training.akka.j3;
+
+import akka.actor.Props;
+import akka.actor.UntypedActor;
+import akka.event.Logging;
+import akka.event.LoggingAdapter;
+
+/**
+ * @author Joachim Klein, joachim.klein@secure.avono.de
+ * @since 17.07.15
+ */
+public class WordsCounter extends UntypedActor {
+    LoggingAdapter log = Logging.getLogger(getContext().system(), this);
+
+    //Props
+    public static Props props() {
+        return Props.create(WordsCounter.class);
+    }
+
+    //Message Objects
+    public static class Count {
+        private final String inStr;
+
+        public Count(final String inStr) {
+            this.inStr = inStr;
+        }
+
+        public String getInStr() {
+            return inStr;
+        }
+    }
+
+    //State
+    private int reqCount = 0;
+
+    @Override
+    public void onReceive(final Object message) throws Exception {
+        reqCount++;
+        log.info("Someone says I should count. " + reportReqCount());
+
+        if (message instanceof Count) {
+            Count countReq = (Count) message;
+            if (countReq.getInStr() != null) {
+                getSender().tell(countWords(countReq.getInStr()), getSelf());
+            } else {
+                getSender().tell("Nothing found to count", getSelf());
+            }
+        }
+    }
+
+    private String reportReqCount() {
+        return "I am asked " + reqCount + " time" + ((reqCount > 1) ? "s" : "") + ".";
+    }
+
+    private long countWords(final String inStr) {
+        long counter = 0;
+        for (String word : inStr.split("[^\\w]+")) {
+            if (!word.isEmpty()) {
+                counter++; //count
+            }
+        }
+        return counter;
+    }
+}
+
+// from Scala:
+// class WordsCounter extends Actor with ActorLogging {
+//     var reqCount: Int = 0
+//
+//     def receive = {
+//         reqCount = reqCount + 1
+//         log.info("Someone says I should count. " + reportReqCount)
+//
+//         {
+//           case Count(null) =>
+//             sender() ! "Nothing found to count"
+//           case Count(inStr) =>
+//             sender() ! countWords(inStr)
+//           case others =>
+//             sender() ! "Nothing found to count"
+//         }
+//     }
+//
+//     private def reportReqCount =
+//         "I am asked " + reqCount + " time" + (if (reqCount > 1) "s" else "") + "."
+//
+//     private def countWords(inStr: String) = {
+//         inStr.split("[^\\w]+").count(!_.isEmpty)
+//     }
+// }
+
+
diff --git a/src/test/scala/eu/kedev/training/akka/s1/WordsCounterSpec.scala b/src/test/scala/eu/kedev/training/akka/s1/WordsCounterSpec.scala
index f518664..ad4a507 100644
--- a/src/test/scala/eu/kedev/training/akka/s1/WordsCounterSpec.scala
+++ b/src/test/scala/eu/kedev/training/akka/s1/WordsCounterSpec.scala
@@ -1,15 +1,9 @@
 package eu.kedev.training.akka.s1
 
 import akka.actor.ActorSystem
-import akka.actor.Actor
-import akka.actor.Props
-import akka.testkit.{ TestActors, TestKit, ImplicitSender }
-import com.example.PingActor
-import com.example.PongActor
+import akka.testkit.{ImplicitSender, TestKit}
 import eu.kedev.training.akka.s1
-import org.scalatest.WordSpecLike
-import org.scalatest.Matchers
-import org.scalatest.BeforeAndAfterAll
+import org.scalatest.{BeforeAndAfterAll, Matchers, WordSpecLike}
 
 /**
  * @author Joachim Klein, joachim.klein@secure.avono.de
-- 
2.3.8 (Apple Git-58)

